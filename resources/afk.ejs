<%- include('./components/wrapper') %>

<main class="flex-1 bg-gradient-to-br from-gray-900 to-gray-800">
  <div class="py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header Section -->
      <div class="text-center mb-10">
        <h1 class="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-600 mb-2">
          AFK Rewards Center
        </h1>
        <p class="text-lg text-gray-300 max-w-2xl mx-auto">
          Earn coins while you're away! Keep this page open to accumulate rewards automatically.
        </p>
      </div>

      <!-- Stats Dashboard -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-10">
        <!-- Current Session Card -->
        <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-lg">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-200">Current Session</h3>
            <span class="px-3 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs font-medium">
              Active
            </span>
          </div>
          <div class="space-y-4">
            <div>
              <p class="text-sm text-gray-400">Next reward in</p>
              <p class="text-2xl font-bold text-white" id="coinCountdown">Connecting...</p>
            </div>
            <div>
              <p class="text-sm text-gray-400">Session earnings</p>
              <p class="text-2xl font-bold text-green-400" id="sessionEarn">0 coins</p>
            </div>
          </div>
        </div>

        <!-- Total Stats Card -->
        <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-lg">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Total Statistics</h3>
          <div class="space-y-4">
            <div>
              <p class="text-sm text-gray-400">Current balance</p>
              <p class="text-2xl font-bold text-white" id="currentCoins"><%= coins %> coins</p>
            </div>
            <div>
              <p class="text-sm text-gray-400">AFK duration</p>
              <p class="text-2xl font-bold text-purple-400" id="afkTime">0h 0m 0s</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Progress Visualization -->
      <div class="mb-10">
        <div class="flex justify-between text-sm text-gray-400 mb-2">
          <span>Progress to next reward</span>
          <span id="progressText">0%</span>
        </div>
        <div class="h-3 bg-gray-700 rounded-full overflow-hidden">
          <div id="progressBar" class="h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full transition-all duration-1000 ease-out" style="width: 0%"></div>
        </div>
      </div>

      <!-- Additional Features Section -->
      <div class="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 shadow-lg">
        <h3 class="text-lg font-semibold text-gray-200 mb-4">Reward Boosters</h3>
        <div class="grid grid-cols-2 gap-4">
          <div class="p-4 bg-gray-700/50 rounded-lg border border-gray-600 hover:bg-gray-600/50 transition-colors duration-200">
            <div class="flex items-center space-x-3">
              <div class="p-2 bg-blue-500/20 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                </svg>
              </div>
              <div>
                <p class="text-sm text-gray-300">Referral Bonus</p>
                <p class="text-xs text-gray-400">Earn 10% more</p>
              </div>
            </div>
          </div>
          <div class="p-4 bg-gray-700/50 rounded-lg border border-gray-600 hover:bg-gray-600/50 opacity-50 transition-colors duration-200">
            <div class="flex items-center space-x-3">
              <div class="p-2 bg-purple-500/20 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
              </div>
              <div>
                <p class="text-sm text-gray-300">Premium Boost</p>
                <p class="text-xs text-gray-400">Unlock 2x rewards</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Tips Section -->
      <div class="mt-8 text-center text-sm text-gray-400">
        <p>Tip: Keep this tab active in your browser to continue earning rewards.</p>
      </div>
    </div>
  </div>
</main>

<script>
  let session = 0;
  let afkTime = 0;
  let currentCoins = 0;
  let countdownValue = 0;
  let maxCountdown = 60; // Adjust based on your actual reward interval

  function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondsRemaining = seconds % 60;

    return `${hours}h ${minutes}m ${secondsRemaining}s`;
  }

  function updateProgress() {
    const progress = ((maxCountdown - countdownValue) / maxCountdown) * 100;
    document.getElementById('progressBar').style.width = `${progress}%`;
    document.getElementById('progressText').textContent = `${Math.round(progress)}%`;
  }

  function connect() {
    const ws = new WebSocket(`${window.location.protocol === "https:" ? "wss" : "ws"}://${window.location.host}/afkwspath`);

    ws.onopen = () => {
      console.log("[WS] Connected to websocket.");
      document.getElementById("coinCountdown").textContent = "Connected";
    };

    ws.onmessage = (msg) => {
      let z = JSON.parse(msg.data);
      if (z.type === "count") {
        countdownValue = z.amount;
        document.getElementById("coinCountdown").textContent = `${z.amount} seconds`;
        afkTime++;
        document.getElementById("afkTime").textContent = formatTime(afkTime);
        updateProgress();
      } else if (z.type === "coin") {
        session++;
        currentCoins++;
        document.getElementById("sessionEarn").textContent = `${session} coins`;
        document.getElementById("currentCoins").textContent = `${currentCoins} coins`;
        // Reset countdown animation
        countdownValue = maxCountdown;
        updateProgress();

        // Add visual feedback
        const countdownElement = document.getElementById("coinCountdown");
        countdownElement.classList.add("animate-pulse", "text-green-400");
        setTimeout(() => {
          countdownElement.classList.remove("animate-pulse", "text-green-400");
        }, 1000);
      }
    };

    ws.onerror = (err) => {
      console.log("[WS] Error connecting to websocket.", err);
      document.getElementById("coinCountdown").textContent = "Reconnecting...";
      document.getElementById("sessionEarn").textContent = `Reconnecting...`;
      document.getElementById("currentCoins").textContent = `Reconnecting...`;
      setTimeout(connect, 1000);
    };

    ws.onclose = () => {
      document.getElementById("coinCountdown").textContent = "Reconnecting...";
      setTimeout(connect, 1000);
    };
  }

  // Initialize connection
  connect();

  // Add visibility change listener to notify when tab is inactive
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      console.log('Tab is inactive - rewards may be affected');
    }
  });
</script>

<%- include('./components/footer') %>