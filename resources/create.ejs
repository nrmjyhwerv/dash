<body class="bg-gradient-to-br from-gray-900 to-gray-800 min-h-screen" style="font-family: 'Inter', sans-serif;">
  <div>
    <%- include('./components/wrapper') %>
    <!-- Main Content -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/css/alertify.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/AlertifyJS/1.13.1/alertify.min.js"></script>
    
    <main class="flex-grow container mx-auto px-4 py-8">
      <!-- Header Section -->
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center w-full mx-auto pb-6 gap-4">
        <div class="flex flex-col">
          <div class="flex items-center gap-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-purple-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
              <path d="M3.27 6.96 12 12.01l8.73-5.05"></path>
              <path d="M12 22.08V12"></path>
            </svg>
            <h1 class="text-2xl md:text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-400">Create Server</h1>
          </div>
          <p class="text-gray-400 text-sm md:text-base mt-1">Deploy a new server on <span class="text-blue-300"><%= name %></span></p>
        </div>

        <!-- Breadcrumbs with glass effect -->
        <nav class="inline-flex py-2 px-4 rounded-xl backdrop-blur-sm bg-white/5 border border-white/10 shadow-sm transition-all hover:bg-white/10">
          <ol role="list" class="flex items-center space-x-2">
            <li>
              <a href="/" class="text-sm flex items-center gap-2 text-zinc-300 hover:text-white transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                <span>Home</span>
              </a>
            </li>
            <li class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-zinc-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </li>
            <li>
              <a href="#" class="text-sm flex items-center gap-2 font-medium text-white">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
                </svg>
                <span>Create Server</span>
              </a>
            </li>
          </ol>
        </nav>
      </div>

      <!-- Content Card with Glass Effect -->
      <div class="max-w-4xl mx-auto p-6 sm:p-8 backdrop-blur-sm bg-white/5 rounded-xl border border-white/10 shadow-2xl animate__animated animate__fadeIn">
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-2">
            <div class="h-2 w-2 rounded-full bg-purple-400 animate-pulse"></div>
            <h2 class="text-xl font-semibold text-white">Server Configuration</h2>
          </div>
          <p class="text-gray-400 text-sm">Configure your server resources and deployment options</p>
        </div>

        <form id="createServerForm" class="space-y-8">
          <!-- Server Name -->
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-6">
            <div class="sm:col-span-1">
              <label for="name" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
                Server Name
                <span class="text-red-400">*</span>
              </label>
              <div class="relative">
                <input type="text" name="name" id="name" placeholder="my-awesome-server" required
                  class="w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 placeholder-gray-500 transition px-4 py-2.5 pr-10" />
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                  </svg>
                </div>
              </div>
              <p class="mt-1.5 text-xs text-gray-500">Only alphanumeric characters and hyphens allowed (3-32 chars)</p>
            </div>
      
            <!-- RAM -->
            <div>
              <label for="memory" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
                RAM (MB)
                <span class="text-red-400">*</span>
              </label>
              <div class="relative">
                <input type="number" name="memory" id="memory" min="1" max="128" required
                  class="w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 placeholder-gray-500 transition px-4 py-2.5 pr-10" />
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="4" y1="9" x2="20" y2="9"></line>
                    <line x1="4" y1="15" x2="20" y2="15"></line>
                    <line x1="10" y1="3" x2="8" y2="21"></line>
                    <line x1="16" y1="3" x2="14" y2="21"></line>
                  </svg>
                </div>
              </div>
            </div>
      
            <!-- CPU -->
            <div>
              <label for="cpu" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
                CPU (cores)
                <span class="text-red-400">*</span>
              </label>
              <div class="relative">
                <input type="number" name="cpu" id="cpu" min="1" max="32" required
                  class="w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 placeholder-gray-500 transition px-4 py-2.5 pr-10" />
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                    <rect x="9" y="9" width="6" height="6"></rect>
                    <line x1="9" y1="1" x2="9" y2="4"></line>
                    <line x1="15" y1="1" x2="15" y2="4"></line>
                    <line x1="9" y1="20" x2="9" y2="23"></line>
                    <line x1="15" y1="20" x2="15" y2="23"></line>
                    <line x1="20" y1="9" x2="23" y2="9"></line>
                    <line x1="20" y1="14" x2="23" y2="14"></line>
                    <line x1="1" y1="9" x2="4" y2="9"></line>
                    <line x1="1" y1="14" x2="4" y2="14"></line>
                  </svg>
                </div>
              </div>
            </div>
      
            <!-- Disk -->
            <div>
              <label for="disk" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
                Disk (GB)
                <span class="text-red-400">*</span>
              </label>
              <div class="relative">
                <input type="number" name="disk" id="disk" min="10" max="1000" required
                  class="w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 placeholder-gray-500 transition px-4 py-2.5 pr-10" />
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="2" x2="12" y2="6"></line>
                    <line x1="12" y1="18" x2="12" y2="22"></line>
                    <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
                    <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
                    <line x1="2" y1="12" x2="6" y2="12"></line>
                    <line x1="18" y1="12" x2="22" y2="12"></line>
                    <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
                    <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
                  </svg>
                </div>
              </div>
            </div>
          </div>
      
          <!-- Node Selector -->
          <div class="w-full">
            <label for="node" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              Node Location
              <span class="text-red-400">*</span>
            </label>
            <div class="relative">
              <select id="node" required
                class="w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 px-4 py-2.5 appearance-none">
                <% nodes.forEach(function(node) { %>
                  <option value="<%= node.id %>"><%= node.name %></option>
                <% }); %>
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <polyline points="8 12 12 16 16 12"></polyline>
                  <line x1="12" y1="8" x2="12" y2="16"></line>
                </svg>
              </div>
            </div>
          </div>
      
          <!-- Image Selector -->
          <div class="w-full">
            <label for="image" class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-1">
              Server Image
              <span class="text-red-400">*</span>
            </label>
            <div class="relative">
              <select id="image" onchange="updateImageName()" required
                class="w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 px-4 py-2.5 appearance-none">
                <% images.forEach(function(image) { %>
                  <option value="<%= image.Id %>" data-variables='<%= JSON.stringify(image.Variables) %>'>
                    <%= image.Name %>
                  </option>
                <% }); %>
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21 15 16 10 5 21"></polyline>
                </svg>
              </div>
            </div>
            <input type="hidden" id="imageName" />
          </div>
      
          <!-- Dynamic Variables Section -->
          <div id="variablesContainer" class="space-y-6 pt-4 border-t border-gray-800"></div>
      
          <!-- Submit Button -->
          <div class="flex justify-end pt-6">
            <button type="button" onclick="validateAndSubmit()" 
              class="px-8 py-3 bg-gradient-to-r from-purple-600 to-blue-500 text-white rounded-xl shadow-lg hover:shadow-purple-500/20 hover:from-purple-600 hover:to-blue-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-gray-900 font-medium flex items-center gap-2 group">
              <span class="group-hover:translate-x-1 transition-transform">Create Server</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 group-hover:translate-x-1 transition-transform" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="5" y1="12" x2="19" y2="12"></line>
                <polyline points="12 5 19 12 12 19"></polyline>
              </svg>
            </button>
          </div>
        </form>
      </div>
    </main>
    
    <script>
      // Initialize variables on page load
      document.addEventListener('DOMContentLoaded', function() {
        updateImageName();
        
        // Add input validation
        document.getElementById('name').addEventListener('input', function() {
          this.value = this.value.replace(/[^a-zA-Z0-9-]/g, '');
        });
      });

      function updateImageName() {
        const imageSelect = document.getElementById("image");
        const selectedOption = imageSelect.options[imageSelect.selectedIndex];
        document.getElementById("imageName").value = selectedOption.text;
        checkVariables();
      }
    
      function checkVariables() {
        const select = document.getElementById("image");
        const selectedOption = select.options[select.selectedIndex];
        const variables = JSON.parse(selectedOption.getAttribute('data-variables') || '{}');
        const container = document.getElementById("variablesContainer");

        container.innerHTML = '';
        
        if (Object.keys(variables).length > 0) {
          const header = document.createElement('div');
          header.className = 'flex items-center gap-3 mb-4';
          
          const dot = document.createElement('div');
          dot.className = 'h-2 w-2 rounded-full bg-blue-400 animate-pulse';
          
          const title = document.createElement('h3');
          title.className = 'text-lg font-medium text-white';
          title.textContent = 'Image Configuration';
          
          header.appendChild(dot);
          header.appendChild(title);
          container.appendChild(header);
          
          for (const [key, value] of Object.entries(variables)) {
            const div = document.createElement('div');
            div.className = 'mb-4';
            
            const label = document.createElement('label');
            label.className = 'block text-sm font-medium text-gray-300 mb-2';
            label.textContent = key;
            label.htmlFor = key;
            
            const input = document.createElement('input');
            input.type = value.type || 'text';
            input.placeholder = value.default ? `Default: ${value.default}` : '';
            input.className = 'w-full rounded-lg bg-gray-900/70 text-white border border-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 px-4 py-2.5';
            input.id = key;
            if (value.default) {
              input.value = value.default;
            }
            
            if (value.description) {
              const desc = document.createElement('p');
              desc.className = 'mt-1.5 text-xs text-gray-500';
              desc.textContent = value.description;
              div.appendChild(desc);
            }
            
            div.appendChild(label);
            div.appendChild(input);
            container.appendChild(div);
          }
        }
      }
    
      function validateAndSubmit() {
        // Validate required fields
        const requiredFields = ['name', 'memory', 'cpu', 'disk', 'node', 'image'];
        let isValid = true;
        
        requiredFields.forEach(field => {
          const element = document.getElementById(field);
          if (!element.value.trim()) {
            element.classList.add('border-red-500');
            element.classList.add('animate__animated', 'animate__headShake');
            setTimeout(() => {
              element.classList.remove('animate__animated', 'animate__headShake');
            }, 1000);
            isValid = false;
          } else {
            element.classList.remove('border-red-500');
          }
        });

        // Validate server name format
        const name = document.getElementById('name').value;
        if (!/^[a-zA-Z0-9-]{3,32}$/.test(name)) {
          alertify.error('Server name must be 3-32 characters with only alphanumeric and hyphens');
          document.getElementById('name').classList.add('border-red-500', 'animate__animated', 'animate__headShake');
          setTimeout(() => {
            document.getElementById('name').classList.remove('animate__animated', 'animate__headShake');
          }, 1000);
          isValid = false;
        }

        if (!isValid) {
          alertify.error('Please fill all required fields correctly');
          return;
        }

        submitForm();
      }
      
      async function submitForm() {
        // Show loading state
        const submitBtn = document.querySelector('button[onclick="validateAndSubmit()"]');
        const originalContent = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = `
          <span class="flex items-center justify-center gap-2">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Deploying...
          </span>
        `;

        try {
          const name = encodeURIComponent(document.getElementById("name").value);
          const image = encodeURIComponent(document.getElementById("image").value);
          const imageName = encodeURIComponent(document.getElementById("imageName").value);
          const memory = encodeURIComponent(document.getElementById("memory").value);
          const cpu = encodeURIComponent(document.getElementById("cpu").value);
          const disk = encodeURIComponent(document.getElementById("disk").value);
          const node = encodeURIComponent(document.getElementById("node").value);
      
          const variables = Array.from(document.querySelectorAll('#variablesContainer input'))
            .reduce((acc, input) => ({ ...acc, [input.id]: input.value }), {});
          
          const variablesJSON = encodeURIComponent(JSON.stringify(variables));
      
          // Small delay for UX purposes
          await new Promise(resolve => setTimeout(resolve, 800));
          
          window.location.href = `/create?name=${name}&image=${image}&imageName=${imageName}&ram=${memory}&cpu=${cpu}&disk=${disk}&node=${node}&variables=${variablesJSON}`;
        } catch (error) {
          alertify.error('An error occurred while submitting the form');
          console.error(error);
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalContent;
        }
      }
    </script>
</body>
