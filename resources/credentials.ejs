<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Credentials | Cryptalis Panel</title>
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Cabin:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <style>
    :root {
      --primary: #fb923c;
      --primary-hover: #ea580c;
      --bg: #10181e;
      --card-bg: #1a232b;
      --text-primary: #ffffff;
      --text-secondary: #94a3b8;
      --border: rgba(255, 255, 255, 0.1);
    }
    
    body {
      background-color: var(--bg);
      font-family: 'Space Grotesk', sans-serif;
      color: var(--text-primary);
      overflow-x: hidden;
    }
    
    .loadingbar .bar {
      background: var(--primary);
      height: 2px;
      box-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary);
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 0.8; }
      50% { opacity: 1; }
      100% { opacity: 0.8; }
    }
    
    .card {
      background: var(--card-bg);
      border: 1px solid var(--border);
      border-radius: 16px;
      transition: all 0.3s ease;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
    }
    
    .btn-primary {
      background: var(--primary);
      color: white;
      transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
      background: var(--primary-hover);
      transform: translateY(-1px);
    }
    
    .btn-secondary {
      background: rgba(255, 255, 255, 0.1);
      color: white;
      transition: all 0.3s ease;
    }
    
    .btn-secondary:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-1px);
    }
    
    .password-container {
      position: relative;
      transition: all 0.3s ease;
    }
    
    .password-blur {
      filter: blur(5px);
      transition: filter 0.3s ease;
      user-select: none;
    }
    
    .password-blur:hover {
      filter: none;
    }
    
    .copy-notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background: var(--primary);
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      opacity: 0;
      transform: translateY(-20px);
      transition: all 0.3s ease;
    }
    
    .copy-notification.show {
      opacity: 1;
      transform: translateY(0);
    }
    
    .icon-hover {
      transition: all 0.3s ease;
    }
    
    .icon-hover:hover {
      transform: scale(1.1);
      color: var(--primary);
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease-in;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .input-field {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: white;
      padding: 12px 16px;
      border-radius: 8px;
      width: 100%;
      transition: all 0.3s ease;
    }
    
    .input-field:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }
    
    .input-field:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 2px rgba(251, 146, 60, 0.2);
    }
    
    @media (max-width: 768px) {
      .flex-col-mobile {
        flex-direction: column;
      }
      
      .w-full-mobile {
        width: 100%;
      }
      
      .text-center-mobile {
        text-align: center;
      }
      
      .card {
        padding: 1.5rem;
      }
    }
  </style>
</head>
<body class="bg-[#10181e] font-sans" style="font-family: 'Space Grotesk', sans-serif;">
  <%- include('./components/wrapper') %>
  
  <!-- Loading Bar -->
  <script src="https://cdn.jsdelivr.net/npm/nanobar@0.4.2/nanobar.min.js"></script>
  <script>
    var options = {
      classname: 'loadingbar',
      id: 'loadingbar'
    };
    var nanobar = new Nanobar(options);
    
    function simulateLoading() {
      nanobar.go(30);
      setTimeout(() => nanobar.go(70), 200);
      setTimeout(() => nanobar.go(100), 400);
    }
    
    document.addEventListener('DOMContentLoaded', simulateLoading);
  </script>

  <!-- Copy Notification -->
  <div id="copyNotification" class="copy-notification">
    Copied to clipboard!
  </div>

  <!-- Main Content -->
  <main class="flex-grow container mx-auto px-4 py-8 animate__animated animate__fadeIn">
    <div class="flex flex-col-mobile justify-between items-center w-full mx-auto pb-4 gap-4">
      <!-- Welcome text and subtext -->
      <div class="flex flex-col text-center-mobile">
        <h1 class="text-2xl md:text-3xl text-white font-semibold mb-1" style="font-family: 'Cabin';">User Credentials</h1>
        <p class="text-gray-400 text-md">View the credentials to your Cryptalis Panel account.</p>
      </div>

      <!-- Breadcrumbs -->
      <nav aria-label="Breadcrumb" class="inline-flex py-2 px-4 rounded-xl bg-white/5 transition-all duration-300 hover:bg-white/10">
        <ol role="list" class="flex items-center space-x-2">
          <li>
          <li>
            <a href="./profile" class="text-sm flex items-center gap-2 font-medium text-white/80 hover:text-white transition-colors duration-200" aria-current="page">
              User Profile
            </a>
          </li>
        </ol>
      </nav>
    </div>

    <!-- Credentials Content -->
    <div class="mt-8 md:mt-12 flex justify-center">
      <div class="card w-full max-w-md p-6 md:p-8 animate__animated animate__fadeInUp">
        <div class="mb-6 flex justify-center">
          <div class="p-3 bg-white/5 rounded-xl border border-white/10 animate__animated animate__pulse animate__infinite animate__slower">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-200 icon-hover" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
            </svg>
          </div>
        </div>
        
        <h2 class="text-xl md:text-2xl text-white font-bold mb-3 text-center">User Credentials</h2>
        <p class="text-gray-400 mb-6 text-center">Use these credentials to access certain actions such as SFTP.</p>
        
        <form class="space-y-4">
          <div class="space-y-2">
            <label class="text-sm font-medium text-gray-400">Email</label>
            <div class="relative">
              <input 
                id="emailInput"
                value="<%= user.email %>" 
                class="input-field" 
                disabled
                readonly
              >
              <button 
                type="button" 
                onclick="copyToClipboard('<%= user.email %>', 'Email')" 
                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors duration-200"
                aria-label="Copy email"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 icon-hover" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                </svg>
              </button>
            </div>
          </div>
          
          <div class="space-y-2">
            <label class="text-sm font-medium text-gray-400">Password</label>
            <div class="password-container">
              <% if (req.session.password) { %>
                <div class="flex items-center bg-white/5 px-4 py-3 rounded-lg border border-white/10">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 flex-shrink-0 text-zinc-400">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z" />
                  </svg>
                  <span class="ml-3 text-zinc-400"><%= req.session.password %></span>
                </div>
              <% } else { %>
                <div 
                  id="passwordContainer"
                  class="flex items-center bg-white/5 px-4 py-3 rounded-lg border border-white/10 cursor-pointer hover:bg-white/10 transition-colors duration-200"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 flex-shrink-0 text-zinc-400">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z" />
                  </svg>
                  <span 
                    id="passwordText" 
                    class="ml-3 password-blur select-none"
                    data-password="<%= password %>"
                  >
                    <%= password %>
                  </span>
                  <button 
                    type="button" 
                    class="ml-auto text-gray-400 hover:text-white transition-colors duration-200"
                    onclick="copyToClipboard('<%= password %>', 'Password')"
                    aria-label="Copy password"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 icon-hover" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                    </svg>
                  </button>
                </div>
              <% } %>
            </div>
          </div>
          
          <div class="flex flex-col sm:flex-row justify-between gap-3 pt-4">
            <a href="../panel/" class="btn-primary flex-1 text-center py-2.5 px-4 rounded-lg font-medium transition-all duration-300 transform hover:-translate-y-0.5">
              Back to Panel
            </a>
            <button 
              type="button" 
              onclick="copyToClipboard('<%= password %>', 'Password')" 
              class="btn-secondary flex-1 py-2.5 px-4 rounded-lg font-medium transition-all duration-300 transform hover:-translate-y-0.5 flex items-center justify-center gap-2"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
              </svg>
              Copy Password
            </button>
          </div>
        </form>
      </div>
    </div>
  </main>

  <!-- Footer -->
  <%- include('./components/footer') %>

  <script>
    // Show copy notification
    function showCopyNotification(message) {
      const notification = document.getElementById('copyNotification');
      notification.textContent = message || 'Copied to clipboard!';
      notification.classList.add('show');
      setTimeout(() => {
        notification.classList.remove('show');
      }, 2000);
    }
    
    // Copy to clipboard function with fallback
    function copyToClipboard(text, type) {
      // Create a temporary textarea element
      const textarea = document.createElement('textarea');
      textarea.value = text;
      textarea.style.position = 'fixed';  // Prevent scrolling to bottom
      document.body.appendChild(textarea);
      textarea.select();
      
      try {
        // Try using the modern clipboard API
        const successful = document.execCommand('copy');
        if (successful) {
          showCopyNotification(`${type} copied to clipboard!`);
          
          // Temporarily show password if blurred
          if (type === 'Password') {
            const passwordEl = document.getElementById('passwordText');
            if (passwordEl && passwordEl.classList.contains('password-blur')) {
              passwordEl.classList.remove('password-blur');
              setTimeout(() => {
                passwordEl.classList.add('password-blur');
              }, 1000);
            }
          }
        } else {
          throw new Error('Copy command failed');
        }
      } catch (err) {
        // Fallback to clipboard API if available
        if (navigator.clipboard) {
          navigator.clipboard.writeText(text).then(() => {
            showCopyNotification(`${type} copied to clipboard!`);
            
            if (type === 'Password') {
              const passwordEl = document.getElementById('passwordText');
              if (passwordEl && passwordEl.classList.contains('password-blur')) {
                passwordEl.classList.remove('password-blur');
                setTimeout(() => {
                  passwordEl.classList.add('password-blur');
                }, 1000);
              }
            }
          }).catch(err => {
            console.error('Failed to copy: ', err);
            showCopyNotification('Failed to copy. Please try again.');
          });
        } else {
          console.error('Clipboard API not available');
          showCopyNotification('Copy failed. Please copy manually.');
        }
      } finally {
        document.body.removeChild(textarea);
      }
    }
    
    // Password container click handler
    document.addEventListener('DOMContentLoaded', () => {
      const passwordContainer = document.getElementById('passwordContainer');
      const passwordText = document.getElementById('passwordText');
      
      if (passwordContainer && passwordText) {
        // Click to copy
        passwordContainer.addEventListener('click', (e) => {
          // Don't trigger if clicking on the copy button
          if (!e.target.closest('button')) {
            const password = passwordText.getAttribute('data-password');
            copyToClipboard(password, 'Password');
          }
        });
        
        // Hover to reveal
        passwordContainer.addEventListener('mouseenter', () => {
          passwordText.classList.remove('password-blur');
        });
        
        passwordContainer.addEventListener('mouseleave', () => {
          passwordText.classList.add('password-blur');
        });
      }
      
      // Email input click to select all
      const emailInput = document.getElementById('emailInput');
      if (emailInput) {
        emailInput.addEventListener('click', () => {
          emailInput.select();
        });
      }
    });
    
    // Set active tab
    function setActiveTab() {
      const currentPath = window.location.pathname;
      const tabs = document.querySelectorAll('#tabs a');
      tabs.forEach(tab => {
        if (tab.getAttribute('href') === currentPath) {
          tab.classList.add('border-orange-500', 'text-orange-500', 'font-medium');
          tab.classList.remove('border-transparent', 'hover:border-gray-300', 'hover:text-white');
        } else {
          tab.classList.remove('border-orange-500', 'text-orange-500', 'font-medium');
          tab.classList.add('border-transparent', 'hover:border-gray-300', 'hover:text-white');
        }
      });
    }
    
    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      setActiveTab();
      
      // For demonstration purposes, simulate changing routes when clicking tabs
      document.querySelectorAll('#tabs a').forEach(tab => {
        tab.addEventListener('click', (e) => {
          e.preventDefault();
          const href = e.currentTarget.getAttribute('href');
          history.pushState(null, '', href);
          window.location.href = href;
          setActiveTab();
        });
      });
      
      // Listen for popstate events (back/forward browser navigation)
      window.addEventListener('popstate', setActiveTab);
    });
  </script>
</body>
</html>
